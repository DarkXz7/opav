"""
Diagn√≥stico profundo: ¬øPor qu√© todos los MigrationProcessID son 4?
"""

# Configurar Django
import os
import sys
import django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proyecto_automatizacion.settings')
django.setup()

from automatizacion.models import MigrationProcess
from automatizacion.logs.models_logs import ProcesoLog
from automatizacion.logs.process_tracker import ProcessTracker

def main():
    print("üîç DIAGN√ìSTICO PROFUNDO: ¬øPor qu√© MigrationProcessID siempre es 4?")
    print("=" * 70)
    
    # 1. Listar TODOS los procesos MigrationProcess
    print("üìã TODOS LOS PROCESOS MigrationProcess:")
    procesos = MigrationProcess.objects.all().order_by('id')
    
    procesos_por_nombre = {}
    for proceso in procesos:
        print(f"   ID: {proceso.id:2d} - Nombre: '{proceso.name}' - Estado: {proceso.status}")
        procesos_por_nombre[proceso.name] = proceso.id
    
    # 2. Verificar espec√≠ficamente los procesos que est√°n fallando
    procesos_problema = ['Kawasaki', 'Suzuki', 'Yamaha']
    
    print(f"\nüéØ VERIFICACI√ìN DE PROCESOS PROBLEM√ÅTICOS:")
    for nombre in procesos_problema:
        if nombre in procesos_por_nombre:
            id_real = procesos_por_nombre[nombre]
            print(f"   {nombre:10} ‚Üí ID real: {id_real}")
        else:
            print(f"   {nombre:10} ‚Üí ‚ùå NO EXISTE")
    
    # 3. Test directo de ProcessTracker para cada proceso
    print(f"\nüß™ TEST DIRECTO ProcessTracker:")
    
    for nombre in procesos_problema:
        if nombre in procesos_por_nombre:
            id_correcto = procesos_por_nombre[nombre]
            
            print(f"\n   üìù Probando {nombre} (ID real: {id_correcto})")
            
            # Crear ProcessTracker manualmente
            tracker = ProcessTracker(nombre)
            
            # Par√°metros con el ID correcto
            parametros = {
                'migration_process_id': id_correcto,  # üéØ ID CORRECTO
                'test_diagnostico': True,
                'proceso_nombre': nombre
            }
            
            print(f"      Enviando migration_process_id = {id_correcto}")
            
            # Ejecutar
            proceso_uuid = tracker.iniciar(parametros)
            
            # Verificar qu√© se guard√≥
            log_creado = ProcesoLog.objects.using('logs').filter(ProcesoID=proceso_uuid).first()
            
            if log_creado:
                migration_id_guardado = log_creado.MigrationProcessID
                print(f"      Guardado: MigrationProcessID = {migration_id_guardado}")
                
                if migration_id_guardado == id_correcto:
                    print(f"      ‚úÖ CORRECTO: {id_correcto} == {migration_id_guardado}")
                else:
                    print(f"      ‚ùå INCORRECTO: esperado {id_correcto}, obtenido {migration_id_guardado}")
                    
                    # Investigar por qu√© cambi√≥
                    print(f"      üîç INVESTIGANDO:")
                    print(f"         ParametrosEntrada: {log_creado.ParametrosEntrada}")
            
            # Finalizar
            tracker.finalizar_exito("Test completado")
    
    # 4. Verificar si hay alg√∫n problema en el ProcessTracker
    print(f"\nüîç REVISANDO ProcessTracker.iniciar():")
    
    # Simulaci√≥n paso a paso
    tracker_debug = ProcessTracker("DebugTest")
    
    # Par√°metros de prueba
    parametros_debug = {
        'migration_process_id': 999,  # Valor √∫nico para detectar
        'debug_test': True
    }
    
    print(f"   üìù Enviando migration_process_id = 999 (valor √∫nico)")
    print(f"   üìù Par√°metros completos: {parametros_debug}")
    
    # Simular la l√≥gica de ProcessTracker.iniciar()
    print(f"\n   üîß Simulando ProcessTracker.iniciar():")
    
    # Paso 1: Extraer MigrationProcessID
    migration_process_id = None
    if parametros_debug and isinstance(parametros_debug, dict):
        migration_process_id = parametros_debug.get('migration_process_id')
    
    print(f"      1. Extracci√≥n: migration_process_id = {migration_process_id}")
    
    # Paso 2: Crear registro (sin guardar realmente)
    print(f"      2. Se crear√≠a ProcesoLog con:")
    print(f"         MigrationProcessID = {migration_process_id}")
    
    # 5. Buscar valores hardcodeados
    print(f"\nüîç BUSCANDO VALORES HARDCODEADOS:")
    
    # Buscar en el c√≥digo si hay alg√∫n 4 hardcodeado
    import re
    
    archivos_revisar = [
        'automatizacion/logs/process_tracker.py',
        'automatizacion/models.py', 
        'automatizacion/views.py'
    ]
    
    for archivo in archivos_revisar:
        try:
            with open(archivo, 'r', encoding='utf-8') as f:
                contenido = f.read()
                
            # Buscar patrones sospechosos
            patron_4 = re.findall(r'.*4.*', contenido)
            patron_migration = re.findall(r'.*[Mm]igration.*[Pp]rocess.*[Ii][Dd].*', contenido)
            
            if '= 4' in contenido or 'migration_process_id.*4' in contenido:
                print(f"   ‚ö†Ô∏è  {archivo}: Contiene '= 4' o referencias a 4")
                
        except Exception as e:
            print(f"   ‚ùå Error leyendo {archivo}: {e}")
    
    print(f"\n" + "=" * 70)
    print("üéØ PR√ìXIMOS PASOS:")
    print("   1. Si ProcessTracker funciona bien con ID=999, el problema est√° en otro lado")
    print("   2. Si ProcessTracker tambi√©n falla, revisar su c√≥digo interno")
    print("   3. Verificar si hay cache del servidor Django")
    print("   4. Buscar valores hardcodeados en el c√≥digo")

if __name__ == "__main__":
    main()