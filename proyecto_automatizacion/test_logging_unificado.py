#!/usr/bin/env python
"""
Script de prueba para verificar el sistema de logging unificado
- Solo un registro por proceso en LogsAutomatizacion
- Datos insertados correctamente en DestinoAutomatizacion
- Mensajes presentables en lugar de NULL
"""

import os
import sys
import django
from datetime import datetime
import uuid

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proyecto_automatizacion.settings')
django.setup()

from django.contrib.auth.models import User
from automatizacion.models import MigrationProcess, DataSource, DatabaseConnection
from automatizacion.logs.models_logs import ProcesoLog
from automatizacion.models_destino import ResultadosProcesados
from automatizacion.web_logger_optimized import registrar_proceso_web, finalizar_proceso_web

def test_logging_unificado():
    """Test del sistema de logging unificado"""
    
    print("=" * 80)
    print("üß™ PRUEBA: Sistema de Logging Unificado")
    print("=" * 80)
    
    # Limpiar registros previos de prueba
    ProcesoLog.objects.filter(NombreProceso__icontains="TEST_LOGGING_UNIFICADO").using('logs').delete()
    ResultadosProcesados.objects.filter(Tipo__icontains="TEST_LOGGING_UNIFICADO").using('destino').delete()
    
    try:
        # Crear o usar usuario de prueba
        user, created = User.objects.get_or_create(
            username='test_logging',
            defaults={'email': 'test@logging.com', 'first_name': 'Test', 'last_name': 'Logging'}
        )
        
        # 1. Probar registrar_proceso_web + finalizar_proceso_web
        print("\n1Ô∏è‚É£ Probando registrar_proceso_web...")
        tracker, proceso_id = registrar_proceso_web(
            nombre_proceso="TEST_LOGGING_UNIFICADO_PROCESO_1",
            usuario=user,
            datos_adicionales={'test': 'logging_unificado', 'timestamp': datetime.now().isoformat()}
        )
        
        if tracker and proceso_id:
            print(f"   ‚úÖ Proceso iniciado. ID: {proceso_id}")
            
            # Actualizar estado intermedio
            tracker.actualizar_estado("EN_PROGRESO", "Procesando datos de prueba...")
            print(f"   ‚úÖ Estado actualizado a EN_PROGRESO")
            
            # Finalizar con √©xito
            finalizar_proceso_web(
                tracker,
                usuario=user,
                exito=True,
                detalles="Test de logging unificado completado exitosamente"
            )
            print(f"   ‚úÖ Proceso finalizado con √©xito")
            
        else:
            print(f"   ‚ùå Error al iniciar proceso")
            return False
            
        # 2. Verificar que solo hay UN registro en LogsAutomatizacion
        print("\n2Ô∏è‚É£ Verificando registros √∫nicos en LogsAutomatizacion...")
        logs = ProcesoLog.objects.filter(ProcesoID=proceso_id).using('logs')
        count_logs = logs.count()
        
        if count_logs == 1:
            print(f"   ‚úÖ Solo 1 registro encontrado (correcto): {count_logs}")
            log_record = logs.first()
            print(f"   üìã Estado: {log_record.Estado}")
            print(f"   üìã MensajeError: '{log_record.MensajeError}'")
            
            # Verificar que no sea NULL
            if log_record.MensajeError and log_record.MensajeError != "NULL":
                print(f"   ‚úÖ MensajeError no es NULL: '{log_record.MensajeError}'")
            else:
                print(f"   ‚ùå MensajeError es NULL o vac√≠o")
                return False
        else:
            print(f"   ‚ùå Se encontraron {count_logs} registros (deber√≠a ser 1)")
            return False
        
        # 3. Probar ejecuci√≥n de MigrationProcess
        print("\n3Ô∏è‚É£ Probando ejecuci√≥n de MigrationProcess...")
        
        # Crear conexi√≥n y fuente de datos de prueba si no existen
        connection, created = DatabaseConnection.objects.get_or_create(
            name="Conexi√≥n Test Logging",
            defaults={
                'server': 'localhost',
                'database': 'test',
                'username': 'test_user',
                'use_windows_auth': True
            }
        )
        
        source, created = DataSource.objects.get_or_create(
            name="Fuente Test Logging",
            defaults={
                'source_type': 'sql',
                'connection': connection
            }
        )
        
        # Crear proceso de migraci√≥n
        process = MigrationProcess.objects.create(
            name="TEST_LOGGING_UNIFICADO_MIGRATION",
            description="Proceso de prueba para logging unificado",
            source=source,
            selected_tables="tabla_test",
            target_db_name="destino"
        )
        
        print(f"   üì¶ Proceso creado: {process.name} (ID: {process.id})")
        
        # Ejecutar el proceso (ahora con l√≥gica real)
        try:
            process.run()
            print(f"   ‚úÖ Proceso ejecutado exitosamente")
            
            # Verificar que se insertaron datos en DestinoAutomatizacion
            destino_records = ResultadosProcesados.objects.using('destino').filter(
                Tipo__icontains="TEST_LOGGING_UNIFICADO"
            )
            
            if destino_records.exists():
                record = destino_records.first()
                print(f"   ‚úÖ Datos encontrados en DestinoAutomatizacion:")
                print(f"       ResultadoID: {record.ResultadoID}")
                print(f"       ProcesoID: {record.ProcesoID}")
                print(f"       Estado: {record.Estado}")
                print(f"       Tipo: {record.Tipo}")
            else:
                print(f"   ‚ùå No se encontraron datos en DestinoAutomatizacion")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error ejecutando proceso: {str(e)}")
            return False
        
        print("\nüéØ RESUMEN DE PRUEBAS:")
        print("‚úÖ Solo un registro por proceso en LogsAutomatizacion")
        print("‚úÖ Mensajes presentables (no NULL) en campo errores")
        print("‚úÖ Datos insertados correctamente en DestinoAutomatizacion")
        print("‚úÖ Sistema de logging unificado funcionando correctamente")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error en la prueba: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return False

def verificar_estado_actual():
    """Verificar el estado actual de las bases de datos"""
    
    print("\n" + "=" * 80)
    print("üìä ESTADO ACTUAL DE LAS BASES DE DATOS")
    print("=" * 80)
    
    # LogsAutomatizacion
    try:
        logs_count = ProcesoLog.objects.using('logs').count()
        print(f"\nüìã LogsAutomatizacion: {logs_count} registros")
        
        recent_logs = ProcesoLog.objects.using('logs').order_by('-FechaEjecucion')[:5]
        for log in recent_logs:
            print(f"   üî∏ {log.NombreProceso} | {log.Estado} | Error: '{log.MensajeError}'")
            
    except Exception as e:
        print(f"‚ùå Error accediendo LogsAutomatizacion: {str(e)}")
    
    # DestinoAutomatizacion
    try:
        destino_count = ResultadosProcesados.objects.using('destino').count()
        print(f"\nüéØ DestinoAutomatizacion: {destino_count} registros")
        
        recent_destino = ResultadosProcesados.objects.using('destino').order_by('-ResultadoID')[:5]
        for record in recent_destino:
            print(f"   üî∏ ID:{record.ResultadoID} | {record.Estado} | Tipo: {record.Tipo}")
            
    except Exception as e:
        print(f"‚ùå Error accediendo DestinoAutomatizacion: {str(e)}")

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas del sistema de logging unificado...")
    
    # Verificar estado actual
    verificar_estado_actual()
    
    # Ejecutar prueba
    success = test_logging_unificado()
    
    if success:
        print("\nüéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print("‚úÖ El sistema de logging unificado est√° funcionando correctamente")
    else:
        print("\nüí• ALGUNAS PRUEBAS FALLARON")
        print("‚ùå Revisar la configuraci√≥n del sistema")
    
    # Verificar estado despu√©s de la prueba
    verificar_estado_actual()