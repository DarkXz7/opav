import os
import django
import sys

# Configurar entorno Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proyecto_automatizacion.settings')
django.setup()

from automatizacion.logs.process_tracker import ProcessTracker

def test_process_tracker():
    """Test para verificar que los m√©todos del ProcessTracker funcionan correctamente"""
    print("üß™ Iniciando prueba de ProcessTracker...")
    
    # Crear una instancia de ProcessTracker
    tracker = ProcessTracker("test_proceso_tracker")
    
    # Probar el m√©todo iniciar
    print("\nüìù Probando m√©todo iniciar()...")
    proceso_id = tracker.iniciar({"test_param": "valor_test"})
    print(f"‚úÖ Proceso iniciado con ID: {proceso_id}")
    
    # Probar el m√©todo actualizar_estado
    print("\nüìù Probando m√©todo actualizar_estado()...")
    tracker.actualizar_estado("EN_PROGRESO", "Probando actualizaci√≥n de estado")
    print("‚úÖ Estado actualizado correctamente")
    
    # Probar el m√©todo finalizar
    print("\nüìù Probando m√©todo finalizar()...")
    try:
        tracker.finalizar("COMPLETADO", "Prueba de finalizaci√≥n completada")
        print("‚úÖ M√©todo finalizar() funciona correctamente")
    except Exception as e:
        print(f"‚ùå Error al llamar finalizar(): {str(e)}")
        print("El m√©todo finalizar() no existe o tiene un problema")
        return False
    
    # Probar el m√©todo finalizar_exito
    print("\nüìù Probando m√©todo finalizar_exito()...")
    try:
        tracker_exito = ProcessTracker("test_finalizar_exito")
        tracker_exito.iniciar()
        tracker_exito.finalizar_exito("Prueba de finalizar_exito completada")
        print("‚úÖ M√©todo finalizar_exito() funciona correctamente")
    except Exception as e:
        print(f"‚ùå Error al llamar finalizar_exito(): {str(e)}")
        return False
    
    # Probar el m√©todo finalizar_error
    print("\nüìù Probando m√©todo finalizar_error()...")
    try:
        tracker_error = ProcessTracker("test_finalizar_error")
        tracker_error.iniciar()
        tracker_error.finalizar_error(Exception("Error de prueba"))
        print("‚úÖ M√©todo finalizar_error() funciona correctamente")
    except Exception as e:
        print(f"‚ùå Error al llamar finalizar_error(): {str(e)}")
        return False
    
    print("\n‚úÖ Todas las pruebas completadas con √©xito!")
    return True

if __name__ == "__main__":
    success = test_process_tracker()
    sys.exit(0 if success else 1)