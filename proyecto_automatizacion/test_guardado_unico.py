"""
Script para probar que el guardado inicial solo cree un registro √∫nico
en ProcesoLog durante todo el flujo de guardado
"""

import json
from django.contrib.auth.models import User
from django.test import RequestFactory
from django.http import HttpRequest
from automatizacion.models import DatabaseConnection, DataSource
from automatizacion.logs.models_logs import ProcesoLog
from automatizacion.views import save_process

print("üß™ Prueba: Solo un registro en guardado inicial")
print("=" * 60)

# Crear usuario de prueba
user, created = User.objects.get_or_create(
    username='test_guardado',
    defaults={'email': 'test@guardado.com'}
)

# Contar registros antes del flujo
logs_antes = ProcesoLog.objects.using('logs').count()
print(f"üìä Registros ANTES del guardado: {logs_antes}")

# Crear conexi√≥n y fuente de datos de prueba
connection = DatabaseConnection.objects.create(
    name="Conexi√≥n Test Guardado",
    server="localhost",
    username="test_user",
    password="test_pass",
    selected_database="TestDB"
)

source = DataSource.objects.create(
    name="Fuente Test Guardado",
    source_type="sql",
    connection=connection
)

# Simular la llamada a save_process (que es la √∫nica que debe crear logs)
factory = RequestFactory()

# Datos del proceso como los enviar√≠a el frontend
process_data = {
    'name': 'TEST_GUARDADO_UNICO',
    'description': 'Proceso de prueba para verificar logging √∫nico',
    'source_id': source.id,
    'selected_database': 'DestinoAutomatizacion',
    'selected_tables': ['dbo.TestTable'],
    'selected_columns': {'dbo.TestTable': ['col1', 'col2', 'col3']},
    'target_db': 'destino'
}

# Crear request POST con los datos
request = factory.post(
    '/automatizacion/api/save_process/',
    data=json.dumps(process_data),
    content_type='application/json'
)
request.user = user

print(f"üéØ Ejecutando save_process...")

try:
    # Ejecutar save_process
    response = save_process(request)
    
    if hasattr(response, 'status_code') and response.status_code == 200:
        print(f"‚úÖ save_process ejecutado exitosamente")
        
        # Contar registros despu√©s
        logs_despues = ProcesoLog.objects.using('logs').count()
        print(f"üìä Registros DESPU√âS del guardado: {logs_despues}")
        
        # Verificar que solo se a√±adi√≥ un registro
        diferencia = logs_despues - logs_antes
        
        if diferencia == 1:
            print(f"‚úÖ PERFECTO: Solo se cre√≥ {diferencia} registro (correcto)")
            
            # Verificar el contenido del registro
            ultimo_log = ProcesoLog.objects.using('logs').order_by('-FechaEjecucion').first()
            if ultimo_log and 'TEST_GUARDADO_UNICO' in ultimo_log.NombreProceso:
                print(f"üìã Registro creado:")
                print(f"   Proceso: {ultimo_log.NombreProceso}")
                print(f"   Estado: {ultimo_log.Estado}")
                print(f"   Error: '{ultimo_log.MensajeError}'")
                
                if ultimo_log.MensajeError and 'exitosamente' in ultimo_log.MensajeError:
                    print(f"‚úÖ Mensaje correcto y no NULL")
                else:
                    print(f"‚ùå Mensaje incorrecto o NULL")
            else:
                print(f"‚ùå No se encontr√≥ el registro esperado")
                
        elif diferencia == 0:
            print(f"‚ùå No se cre√≥ ning√∫n registro")
        else:
            print(f"‚ùå Se crearon {diferencia} registros (deber√≠a ser solo 1)")
            
            # Mostrar los √∫ltimos registros para debug
            ultimos_logs = ProcesoLog.objects.using('logs').order_by('-FechaEjecucion')[:diferencia]
            for i, log in enumerate(ultimos_logs, 1):
                print(f"   {i}. {log.NombreProceso} | {log.Estado}")
    else:
        print(f"‚ùå Error en save_process: {response.status_code if hasattr(response, 'status_code') else 'No status'}")
        
except Exception as e:
    print(f"‚ùå Excepci√≥n en la prueba: {str(e)}")
    import traceback
    print(traceback.format_exc())

print("\n" + "=" * 60)
print("üèÅ Prueba completada")

# Limpiar datos de prueba
try:
    source.delete()
    connection.delete()
    print("üßπ Datos de prueba limpiados")
except:
    pass